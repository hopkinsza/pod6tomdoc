# vim: ft=perl6 tabstop=4 shiftwidth=4

unit class Pod::To::Mdoc;

method render(Positional $pod) {
    pod2mdoc($pod)
}

sub debug($s) {
    #say $s;
}

#my $pod2mdoc-iter = 0;

#| Array of Pod values to mdoc. typical usage: pod2mdoc($=pod)
sub pod2mdoc(Positional $pod) is export {
    #say "iteration $pod2mdoc-iter"; $pod2mdoc-iter++;

    my $ret = q:to/END/;
    .Dd $Mdocdate$
    .Dt TEST 1
    .Os
    .Sh NAME
    .Nm test
    .Nd desc
    END

    my $prev-listlvl = 0;
    for $pod -> $rpod {
        $ret ~= rpod2mdoc($rpod, $prev-listlvl);
    }
    return $ret;
}

my $n = 0;
#| real Pod to mdoc
sub rpod2mdoc($pod, $prev-listlvl is rw) {
    debug "!!CONVERTING: {$pod.raku}";
    debug '';

    my $ret = '';
    my Bool $begin-list = True;

    # end lists if necessary
    if $prev-listlvl > 0 {
        #
        # end all lists if we're not an item
        #
        if $pod !~~ Pod::Item {
            for 1..$prev-listlvl {
                $ret ~= ".El\n";
            }
        }
        #
        # otherwise...
        #
        elsif $pod.level == $prev-listlvl {
            # continue adding to the same list
            $begin-list = False;
        }
        elsif $pod.level > $prev-listlvl {
            # begin a new list
            $begin-list = True;
            if $prev-listlvl - $pod.level > 1 {
                die 'Skipping =item levels unsupported; ' ~
                "level $prev-listlvl -> {$pod.level} requested";
            }
        }
        else {
            # close as many as needed
            $begin-list = False;
            for 1..($prev-listlvl - $pod.level) {
                $ret ~= ".El\n";
            }
        }
    }

    given $pod {
        when Positional             { $ret ~= $pod.flat>>.&rpod2mdoc($prev-listlvl).join }
        when Pod::Heading           { $ret ~= heading2mdoc $pod                    }
        when Pod::Block::Code       { $ret ~=    code2mdoc $pod                    }
        when Pod::Block::Named      { $ret ~=   named2mdoc $pod                    }
        when Pod::Block::Para       { $ret ~=    para2mdoc $pod                    }
        #when Pod::Block::Table      { table2text($pod)               }
        #when Pod::Block::Declarator { declarator2text($pod)          }
        when Pod::Item {
                $ret ~= item2mdoc $pod, $prev-listlvl, $begin-list
        }
        #when Pod::Defn              { pod2text($pod.contents[0]) ~ "\n"
        #                              ~ pod2text($pod.contents[1..*-1]) }

        when Pod::FormattingCode    { $ret ~= formatting2mdoc $pod                 }
        when Pod::Block::Comment    { return '' }
        #when Pod::Config            { '' }
        default                     { return $pod.Str                       }
    }

    debug "!!RESULT $n: $ret";
    $n++;
    return $ret;
}

sub heading2mdoc($pod) {
    my $prev-listlvl = 0;
    given $pod.level {
        when 1  { '.Sh ' ~ rpod2mdoc($pod.contents[0].contents, $prev-listlvl) ~     "\n" }
        when 2  { '.Ss ' ~ rpod2mdoc($pod.contents[0].contents, $prev-listlvl) ~     "\n" }
        default { '\fB'  ~ rpod2mdoc($pod.contents[0].contents, $prev-listlvl) ~ "\\fP\n" }
    }
}

sub code2mdoc($pod) {
    #$pod.contents>>.&pod2mdoc.join.indent(4)
    ".Bd -literal -offset indent\n" ~ $pod.contents ~ "\n.Ed\n"
}

sub named2mdoc($pod) {
    my $prev-listlvl = 0;
    given $pod.name {
        when 'pod'  { rpod2mdoc($pod.contents, $prev-listlvl) }
        when 'para' { rpod2mdoc($pod.contents, $prev-listlvl) }
        #when 'config' { }
        #when 'nested' { }
        default     { '.Sh ' ~ $pod.name ~ "\n" ~ rpod2mdoc($pod.contents, $prev-listlvl) }
    }
}

sub para2mdoc($pod) {
    my $prev-listlvl = 0;
    ".Pp\n" ~ rpod2mdoc($pod.contents, $prev-listlvl) ~ "\n"
}

sub item2mdoc($pod, $prev-listlvl is rw, Bool $begin-list=False) {
    my $ret = '';

    if $begin-list {
        debug '==> beginning list';
        my $list-flags = ($pod.level % 2 == 1) ?? '-bullet' !! '-dash';
        $list-flags ~= ' -compact' if $pod.level > 1;

        $ret ~= ".Bl $list-flags\n";
    }

    $prev-listlvl = $pod.level;
    debug "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
    debug "!!!! prev-listlvl is now: $prev-listlvl";
    debug "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
    my $tmp = 0;
    $ret ~= ".It\n" ~ rpod2mdoc($pod.contents[0].contents, $tmp) ~
        "\n" ~ rpod2mdoc($pod.contents[1..*-1], $tmp);
    debug "ret is: $ret";
    return $ret;
}

sub formatting2mdoc($pod) {
    my $text = $pod.contents.join;
    given $pod.type {
        when 'I' { '\fI'   ~ $text ~ '\fP' }
        when 'C' { '\f(CW' ~ $text ~ '\fP' }
        default  { $text }
    }
}
